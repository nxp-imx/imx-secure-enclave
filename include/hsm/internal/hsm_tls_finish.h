// SPDX-License-Identifier: BSD-3-Clause
/*
 * Copyright 2023 NXP
 */

#ifndef HSM_TLS_FINISH_H
#define HSM_TLS_FINISH_H

#include "internal/hsm_key.h"
#include "internal/hsm_utils.h"
#include "internal/hsm_handle.h"
#include "internal/hsm_key_generate.h"

/**
 *  @defgroup group30 TLS finish
 * @{
 */

/**
 * Bitmap specifying the hash algorithm
 */
typedef uint8_t hsm_op_tls_finish_algo_id_t;

/**
 * Bitmap specifying the tls finish operation properties
 */
typedef uint8_t hsm_op_tls_finish_flags_t;

/**
 * Structure specifying the tls finish operation member arguments
 */
typedef struct {
	uint32_t                    key_identifier;
	//!< identifier of the master_secret key used for the PRF.
	uint8_t                     *handshake_hash_input;
	//!< pointer to the input area containing the hash of the handshake messages.
	uint8_t                     *verify_data_output;
	//!< pointer to the output area where the verify_data contents will be written.
	uint16_t                    handshake_hash_input_size;
	//!< size of the hash of the handshake messages
	uint16_t                    verify_data_output_size;
	//!< size of the required verify_data output
	hsm_op_tls_finish_flags_t   flags;
	//!< bitmap specifying the operation properties
	hsm_op_tls_finish_algo_id_t hash_algorithm;
	//!< hash algorithm to be used for the PRF
} op_tls_finish_args_t;

/**
 * This command is designed to compute the verify_data block required for the
 * Finished message in the TLS handshake.\n
 * The input key must be a master_secret key generated by a previous hsm_key_exchange
 * call using a TLS KDF.\n
 * User can call this function only after having opened a key management service flow.\n
 *
 * \param key_management_hdl handle identifying the key store management service flow.
 * \param args pointer to the structure containing the function arguments.
 *
 * \return error code
 */
hsm_err_t hsm_tls_finish(hsm_hdl_t key_management_hdl,
			 op_tls_finish_args_t *args);

#define HSM_OP_TLS_FINISH_HASH_ALGO_SHA256              (0x06)
//!< Hash algorithm SHA256
#define HSM_OP_TLS_FINISH_HASH_ALGO_SHA384              (0x07)
//!< Hash algorithm SHA384
#define HSM_OP_TLS_FINISH_FLAGS_CLIENT                  BIT(0)
//!< Use "client finished" label for PRF
#define HSM_OP_TLS_FINISH_FLAGS_SERVER                  BIT(1)
//!< Use "server finished" label for PRF

/**
 *\addtogroup qxp_specific
 * \ref group30
 *
 * - \ref hsm_tls_finish API is not supported.
 * - \ref HSM_OP_TLS_FINISH_HASH_ALGO_SHA256 is not supported.
 * - \ref HSM_OP_TLS_FINISH_HASH_ALGO_SHA384 is not supported.
 * - \ref HSM_OP_TLS_FINISH_FLAGS_CLIENT is not supported.
 * - \ref HSM_OP_TLS_FINISH_FLAGS_SERVER is not supported.
 */
/**
 *\addtogroup dxl_specific
 * \ref group30
 *
 * - \ref hsm_tls_finish API is not supported.
 * - \ref HSM_OP_TLS_FINISH_HASH_ALGO_SHA256 is not supported.
 * - \ref HSM_OP_TLS_FINISH_HASH_ALGO_SHA384 is not supported.
 * - \ref HSM_OP_TLS_FINISH_FLAGS_CLIENT is not supported.
 * - \ref HSM_OP_TLS_FINISH_FLAGS_SERVER is not supported.
 */
/** @} end of tls finish operation */
#endif
